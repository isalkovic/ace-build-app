# Â© Copyright IBM Corporation 2018
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{{- if .Values.queueManagerEnabled }}
{{ $pvcName := .Values.dataPVC.name }}
{{ $statefulSetName := include "fullname" . }}
{{ $serverName := .Values.integrationServer.name | default .Release.Name | replace "-" "" }}
{{ $secretName := .Values.configurationSecret | default (printf "%s-%s" $statefulSetName "configuration") }}
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: {{ $statefulSetName }}
  labels:
    app: {{ .Chart.Name }}
    chart: {{ .Chart.Name }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  annotations:
    {{- if .Values.productionDeployment }}
    appconnectenterprise: 'prod'
    {{- else }}
    appconnectenterprise: 'dev'
    {{- end }}
    serverName: {{ print $serverName | quote }}
spec:
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
      chart: {{ .Chart.Name }}
      release: {{ .Release.Name }}
      heritage: {{ .Release.Service }}
  serviceName: acemq
  replicas: 1
  template:
    metadata:
      annotations:
        {{- if .Values.devEdition }}
        productName: IBM App Connect Enterprise for Developers (Free)
        productID: IBMAppConnectEnterprise_f9e7010beec748fe98ff292138860707
        productVersion: "11.0.0.2"
        {{- else if .Values.productionDeployment }}
        productName: IBM App Connect Enterprise (Chargeable)
        productID: IBMAppConnectEnterprise_606f1a9feb4f4cbc85b17a637f6a6b24_chargeable
        productVersion: "11.0.0.2"
        {{- else }}
        productName: IBM App Connect Enterprise (Non-production) (Chargeable)
        productID: IBMAppConnectEnterprise_30fd0181a948441ebe3be59192171987_nonProd_chargeable
        productVersion: "11.0.0.2"
        {{- end }}
      name: {{ $statefulSetName }}
      labels:
        app: {{ .Chart.Name }}
        chart: {{ .Chart.Name }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - {{ .Values.arch }}
      serviceAccountName: {{ include "fullname" . }}
      {{- if .Values.image.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.image.pullSecret }}
      {{- end }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsNonRoot: false
        runAsUser: 0
        fsGroup: {{ default 1001 .Values.fsGroupGid }}
      containers:
        - name: {{ $statefulSetName }}
          image: "{{ .Values.image.repository.acemq }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
          - containerPort: {{ .Values.service.webuiPort }}
            name: webui
          - containerPort: {{ .Values.service.serverlistenerPort }}
            name: ace-http
          - containerPort: {{ .Values.service.serverlistenerTLSPort }}
            name: ace-https
          - containerPort: 1414
          - containerPort: 9443
          - containerPort: 9157
          env:
            - name: LICENSE
              value: {{ .Values.license | quote }}
            - name: USE_QMGR
              value: "true"
            - name: MQ_QMGR_NAME
              value: {{ .Values.queueManager.name | default .Release.Name | replace "-" "" | quote }}
            - name: ACE_SERVER_NAME
              value: {{ print $serverName | quote }}
            - name: SERVICE_NAME
              value: {{ include "fullname" . }}
            - name: LOG_FORMAT
              value: {{ .Values.log.format | default "json" | quote }}
            - name: MQ_ENABLE_METRICS
              value: {{ .Values.metrics.enabled | default true | quote }}
            - name: ACE_ENABLE_METRICS
              value: {{ .Values.metrics.enabled | default true | quote }}
            - name: MQSI_OVERRIDE_HOSTNAME
              value: {{ .Values.service.iP }}
            - name: "ACE_KEYSTORE_PASSWORD"
              valueFrom:
                 secretKeyRef:
                   name: {{ $secretName }}
                   optional: true
                   key: keystorePassword
            - name: "ACE_TRUSTSTORE_PASSWORD"
              valueFrom:
                 secretKeyRef:
                   name: {{ $secretName }}
                   optional: true
                   key: truststorePassword
            - name: MQ_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $secretName }}
                  optional: true
                  key: adminPassword
            - name: MQ_APP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $secretName }}
                  optional: true
                  key: appPassword
          volumeMounts:
            - name: webusers
              mountPath: "/home/aceuser/initial-config/webusers"
            - name: mqsc
              mountPath: "/etc/mqm"
            {{- if .Values.integrationServer.keystoreKeyNames }}
            - name: keystore
              mountPath: "/home/aceuser/initial-config/keystore"
            {{- end }}
            {{- if .Values.integrationServer.truststoreCertNames }}
            - name: truststore
              mountPath: "/home/aceuser/initial-config/truststore"
            {{- end }}
            - name: odbcini
              mountPath: "/home/aceuser/initial-config/odbcini"
            - name: policy
              mountPath: "/home/aceuser/initial-config/policy"
            - name: serverconf
              mountPath: "/home/aceuser/initial-config/serverconf"
            - name: setdbparms
              mountPath: "/home/aceuser/initial-config/setdbparms"
            {{- if .Values.persistence.enabled }}
            - name: {{ $pvcName }}
              mountPath: "/mnt/mqm"
            {{- end }}
          securityContext:
            allowPrivilegeEscalation: true
            readOnlyRootFilesystem: false
            runAsNonRoot: false
            runAsUser: 0
            privileged: false
            # Uncommenting the following lines will enforce the capabilites to be present before the pod will start if you would like tighter control of the system security
            # capabilities:
            #  add:
            #  - SETPCAP
            #  - AUDIT_WRITE
            #  - CHOWN
            #  - NET_RAW
            #  - DAC_OVERRIDE
            #  - FOWNER
            #  - FSETID
            #  - KILL
            #  - SETUID
            #  - SETGID
            #  - NET_BIND_SERVICE
            #  - SYS_CHROOT
            #  - SETFCAP
          # Set liveness probe to determine if the Integration Server is running
          livenessProbe:
            exec:
              command:
              - chkacehealthy
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          # Set readiness probe to determine if the Integration Server admin endpoint is running
          readinessProbe:
            exec:
              command:
              - chkaceready
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          resources:
            limits:
{{ toYaml .Values.acemq.resources.limits | indent 14 }}
            requests:
{{ toYaml .Values.acemq.resources.requests | indent 14 }}
      volumes:
        - name: webusers
          secret:
            secretName: {{ $statefulSetName }}
            optional: true
            items:
            - key: viewerusers
              path: viewer-users.txt
            - key: adminusers
              path: admin-users.txt
        - name: mqsc
          secret:
            secretName: {{ $secretName }}
            optional: true
            items:
            - key: mqsc
              path: config.mqsc
        {{- if .Values.integrationServer.keystoreKeyNames }}
        # Marked as optional as the passphrase is not required and may not be provided
        - name: keystore
          secret:
            secretName: {{ $secretName }}
            optional: true
            items:
            {{- range $key := splitList "," .Values.integrationServer.keystoreKeyNames }}
            - key: keystoreKey-{{ nospace $key }}
              path: {{ nospace $key }}.key
            - key: keystoreCert-{{ nospace $key }}
              path: {{ nospace $key }}.crt
            - key: keystorePass-{{ nospace $key }}
              path: {{ nospace $key }}.pass
            {{- end }}
        {{- end }}
        {{- if .Values.integrationServer.truststoreCertNames }}
        # Not marked as optional as the user has specified this certificate should exist in the secret
        - name: truststore
          secret:
            secretName: {{ $secretName }}
            items:
            {{- range $cert := splitList "," .Values.integrationServer.truststoreCertNames }}
            - key: truststoreCert-{{ nospace $cert }}
              path: {{ nospace $cert }}.crt
            {{- end }}
        {{- end }}
        - name: odbcini
          secret:
            secretName: {{ $secretName }}
            optional: true
            items:
            - key: odbcini
              path: odbc.ini
        - name: policy
          secret:
            secretName: {{ $secretName }}
            optional: true
            items:
            - key: policy
              path: default.policyxml
            - key: policyDescriptor
              path: policy.descriptor
        - name: serverconf
          secret:
            secretName: {{ $secretName }}
            optional: true
            items:
            - key: serverconf
              path: server.conf.yaml
        - name: setdbparms
          secret:
            secretName: {{ $secretName }}
            optional: true
            items:
            - key: setdbparms
              path: setdbparms.txt
  volumeClaimTemplates:
  {{- if .Values.persistence.enabled }}
  - metadata:
      name: {{ $pvcName }}
      labels:
        app: {{ .Chart.Name }}
        chart: {{ .Chart.Name }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
    spec:
      {{- if .Values.persistence.useDynamicProvisioning }}
      # If present, use the storageClassName from the values.yaml, else use the
      # default storageClass setup by Kubernetes Administrator
      #
      # Setting storageClassName to nil means use the default storage class
      storageClassName: {{ default nil .Values.dataPVC.storageClassName | quote }}
      {{- else }}
      # Disable dynamic provisioning
      storageClassName: ""
      {{- end }}
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.dataPVC.size | quote }}
  {{- end }}
{{- end }}
